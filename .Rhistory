install.packages("devtools")
library(devtools)
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
library(slidify)
slidify("index.Rmd")
?publish
pool <- read.csv("D:/Reza/Muenster/data/train-processed-wo-lag.csv", stringsAsFactors = F)
library(forecast)
library(timeDate)
library(caret)
library(reshape2)
library(slidify)
# fill missing dates by previus day
fill_misiing <- function(df){
missing_day <- numeric()
for (i in 1:(nrow(df)-1)){
if ((df$date[i+1] - df$date[i]) > 1){
missing_day <- c(missing_day,i)
}
}
missing_dates <- df$date[missing_day]
for (i in missing_dates){
new_date <- i+1
temp_row <- df[df$date == i,-1]
temp_row <- data.frame("date" = as.Date(new_date), temp_row)
pool1 <- df[df$date <= i,]
pool2 <- df[df$date > i,]
df <- rbind(pool1, temp_row, pool2)
}
df
}
library(forecast)
library(timeDate)
library(caret)
library(reshape2)
library(slidify)
# fill missing dates by previus day
fill_misiing <- function(df){
missing_day <- numeric()
for (i in 1:(nrow(df)-1)){
if ((df$date[i+1] - df$date[i]) > 1){
missing_day <- c(missing_day,i)
}
}
missing_dates <- df$date[missing_day]
for (i in missing_dates){
new_date <- i+1
temp_row <- df[df$date == i,-1]
temp_row <- data.frame("date" = as.Date(new_date), temp_row)
pool1 <- df[df$date <= i,]
pool2 <- df[df$date > i,]
df <- rbind(pool1, temp_row, pool2)
}
df
}
library(forecast)
library(timeDate)
library(caret)
library(reshape2)
library(slidify)
# fill missing dates by previus day
fill_misiing <- function(df){
missing_day <- numeric()
for (i in 1:(nrow(df)-1)){
if ((df$date[i+1] - df$date[i]) > 1){
missing_day <- c(missing_day,i)
}
}
missing_dates <- df$date[missing_day]
for (i in missing_dates){
new_date <- i+1
temp_row <- df[df$date == i,-1]
temp_row <- data.frame("date" = as.Date(new_date), temp_row)
pool1 <- df[df$date <= i,]
pool2 <- df[df$date > i,]
df <- rbind(pool1, temp_row, pool2)
}
df
}
library(forecast)
library(timeDate)
library(caret)
library(reshape2)
library(slidify)
# fill missing dates by previus day
fill_misiing <- function(df){
missing_day <- numeric()
for (i in 1:(nrow(df)-1)){
if ((df$date[i+1] - df$date[i]) > 1){
missing_day <- c(missing_day,i)
}
}
missing_dates <- df$date[missing_day]
for (i in missing_dates){
new_date <- i+1
temp_row <- df[df$date == i,-1]
temp_row <- data.frame("date" = as.Date(new_date), temp_row)
pool1 <- df[df$date <= i,]
pool2 <- df[df$date > i,]
df <- rbind(pool1, temp_row, pool2)
}
df
}
library(forecast)
library(timeDate)
library(caret)
library(reshape2)
library(slidify)
# fill missing dates by previus day
fill_misiing <- function(df){
missing_day <- numeric()
for (i in 1:(nrow(df)-1)){
if ((df$date[i+1] - df$date[i]) > 1){
missing_day <- c(missing_day,i)
}
}
missing_dates <- df$date[missing_day]
for (i in missing_dates){
new_date <- i+1
temp_row <- df[df$date == i,-1]
temp_row <- data.frame("date" = as.Date(new_date), temp_row)
pool1 <- df[df$date <= i,]
pool2 <- df[df$date > i,]
df <- rbind(pool1, temp_row, pool2)
}
df
}
# pool <- read.csv("/media/reza/Data/Reza/Muenster/data/train-processed-wo-lag.csv", stringsAsFactors = F)
pool <- read.csv("D:/Reza/Muenster/data/train-processed-wo-lag.csv", stringsAsFactors = F)
pool$date <- as.Date(pool$date)
pool <- fill_misiing(pool)
visitors <- ts(pool$visitors_pool_total, frequency = 365, start = c(2005,as.POSIXlt(pool$date[1])$yday))
visitors_3years <- window(visitors, start=2010)
plot(visitors_3years, col="blue", ylab  = "Number of visitors", xlab="Year", main="Visitors to the Nettebad OsnabrÃ¼ck (2010-2013)")
library(forecast)
library(timeDate)
library(caret)
library(reshape2)
library(slidify)
# fill missing dates by previus day
fill_misiing <- function(df){
missing_day <- numeric()
for (i in 1:(nrow(df)-1)){
if ((df$date[i+1] - df$date[i]) > 1){
missing_day <- c(missing_day,i)
}
}
missing_dates <- df$date[missing_day]
for (i in missing_dates){
new_date <- i+1
temp_row <- df[df$date == i,-1]
temp_row <- data.frame("date" = as.Date(new_date), temp_row)
pool1 <- df[df$date <= i,]
pool2 <- df[df$date > i,]
df <- rbind(pool1, temp_row, pool2)
}
df
}
# pool <- read.csv("/media/reza/Data/Reza/Muenster/data/train-processed-wo-lag.csv", stringsAsFactors = F)
pool <- read.csv("D:/Reza/Muenster/data/train-processed-wo-lag.csv", stringsAsFactors = F)
pool$date <- as.Date(pool$date)
pool <- fill_misiing(pool)
visitors <- ts(pool$visitors_pool_total, frequency = 365, start = c(2005,as.POSIXlt(pool$date[1])$yday))
visitors_3years <- window(visitors, start=2010)
plot(visitors_3years, col="blue", ylab  = "Number of visitors", xlab="Year", main="Visitors to the Nettebad OsnabrÃ¼ck (2010-2013)")
lag.plot(visitors, set.lags = c(1), col=rgb(0,0,1,.5), main = "Lag 1 plot")
lag.plot(visitors, set.lags = c(7), col=rgb(0,0,1,.5), main = "Lag 7 plot")
lag.plot(visitors, set.lags = c(30), col=rgb(0,0,1,.5), main = "Lag  30 plot")
lag.plot(visitors, set.lags = c(365), col=rgb(0,0,1,.5), main = "Lag 365 plot")
acf(visitors,main = "Autocorrelation function of last three years visitors", lag.max = 35, xaxt="n", ylab = "Autocorrelation")
axis(1,at=(0:35)/350,labels = 0:35, cex=0.8)
visitors <- ts(pool$visitors_pool_total, frequency = 7, start = c(1, as.POSIXlt(pool$date[1])$wday))
start_3y <-  length(visitors)/7 - 3*52
visitors_3years <- window(visitors, start=start_3y)
stl <- stl(visitors, s.window = "per")
stl2 <- stl(visitors_3years, s.window = "per")
autoplot(stl2) + geom_line(color="blue") + ggtitle("Seasonal decompostion of visitors")
rem <- stl$time.series[,2] + stl$time.series[,3]
we <- weekdays(tail(pool$date, length(visitors)), abbreviate = T)
we <- factor(we, levels = c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"))
d <- data.frame("weekday" = we, "Total.Visitors" = visitors, "Seasonality.Removed" = rem)
melted <- melt(d)
qplot(x=weekday, y=value, data=melted, facets = .~variable, color=weekday) + geom_boxplot() + guides(color=F) +
ggtitle("Visitors based on the week day")
rem <- stl$time.series[,2] + stl$time.series[,3]
we <- weekdays(tail(pool$date, length(visitors)), abbreviate = T)
we <- factor(we, levels = c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"))
d <- data.frame("weekday" = we, "Total.Visitors" = visitors, "Seasonality.Removed" = rem)
melted <- melt(d, id.vars = "weekday")
qplot(x=weekday, y=value, data=melted, facets = .~variable, color=weekday) + geom_boxplot() + guides(color=F) +
ggtitle("Visitors based on the week day")
str(melted)
str(we)
we <- weekdays(tail(pool$date, length(visitors)), abbreviate = T)
we <- factor(we, levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))
d <- data.frame("weekday" = we, "Total.Visitors" = visitors, "Seasonality.Removed" = rem)
melted <- melt(d, id.vars = "weekday")
qplot(x=weekday, y=value, data=melted, facets = .~variable, color=weekday) + geom_boxplot() + guides(color=F) +
ggtitle("Visitors based on the week day")
library(forecast)
library(timeDate)
library(caret)
library(reshape2)
library(slidify)
# fill missing dates by previus day
fill_misiing <- function(df){
missing_day <- numeric()
for (i in 1:(nrow(df)-1)){
if ((df$date[i+1] - df$date[i]) > 1){
missing_day <- c(missing_day,i)
}
}
missing_dates <- df$date[missing_day]
for (i in missing_dates){
new_date <- i+1
temp_row <- df[df$date == i,-1]
temp_row <- data.frame("date" = as.Date(new_date), temp_row)
pool1 <- df[df$date <= i,]
pool2 <- df[df$date > i,]
df <- rbind(pool1, temp_row, pool2)
}
df
}
# pool <- read.csv("/media/reza/Data/Reza/Muenster/data/train-processed-wo-lag.csv", stringsAsFactors = F)
pool <- read.csv("D:/Reza/Muenster/data/train-processed-wo-lag.csv", stringsAsFactors = F)
pool$date <- as.Date(pool$date)
pool <- fill_misiing(pool)
visitors <- ts(pool$visitors_pool_total, frequency = 365, start = c(2005,as.POSIXlt(pool$date[1])$yday))
visitors_3years <- window(visitors, start=2010)
plot(visitors_3years, col="blue", ylab  = "Number of visitors", xlab="Year", main="Visitors to the Nettebad OsnabrÃ¼ck (2010-2013)")
lag.plot(visitors, set.lags = c(1), col=rgb(0,0,1,.5), main = "Lag 1 plot")
lag.plot(visitors, set.lags = c(7), col=rgb(0,0,1,.5), main = "Lag 7 plot")
lag.plot(visitors, set.lags = c(30), col=rgb(0,0,1,.5), main = "Lag  30 plot")
lag.plot(visitors, set.lags = c(365), col=rgb(0,0,1,.5), main = "Lag 365 plot")
acf(visitors,main = "Autocorrelation function of last three years visitors", lag.max = 35, xaxt="n", ylab = "Autocorrelation")
axis(1,at=(0:35)/350,labels = 0:35, cex=0.8)
visitors <- ts(pool$visitors_pool_total, frequency = 7, start = c(1, as.POSIXlt(pool$date[1])$wday))
start_3y <-  length(visitors)/7 - 3*52
visitors_3years <- window(visitors, start=start_3y)
stl <- stl(visitors, s.window = "per")
stl2 <- stl(visitors_3years, s.window = "per")
autoplot(stl2) + geom_line(color="blue") + ggtitle("Seasonal decompostion of visitors")
rem <- stl$time.series[,2] + stl$time.series[,3]
we <- weekdays(tail(pool$date, length(visitors)), abbreviate = T)
we <- factor(we, levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))
d <- data.frame("weekday" = we, "Total.Visitors" = visitors, "Seasonality.Removed" = rem)
melted <- melt(d, id.vars = "weekday")
qplot(x=weekday, y=value, data=melted, facets = .~variable, color=weekday) + geom_boxplot() + guides(color=F) +
ggtitle("Visitors based on the week day")
#plot(we,visitors_3years)
#plot(we, rem)
autoplot(window(stl$time.series[,1], end=5)) + ggtitle("Weekly seasonality") + ylab("Number of Visitors")
av <- mean(stl$time.series[,2] + stl$time.series[,3])
autoplot(forecast(stl, h=120),  include = 150, plot.conf = F) + ggtitle("Forecast using STL") + ylab("Number of visitors") +
geom_abline(slope = 0, intercept = av, color="magenta")
stl <- stl(visitors_3years, s.window = "per")
rem <- stl$time.series[,2] + stl$time.series[,3]
we <- weekdays(tail(pool$date, length(visitors_3years)), abbreviate = T)
we <- factor(we, levels = c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"))
d <- data.frame("weekday" = we, "Visitors.Total" = visitors_3years, "Seasonality.Removed" = rem)
melted <- melt(d)
q1 <- qplot(x=weekday, y=value, data=melted, facets = .~variable, color=weekday) + geom_boxplot() + guides(color=F) +
ggtitle("Visitors based on the week day last three years")
q1
library(forecast)
library(timeDate)
library(caret)
library(reshape2)
library(slidify)
# fill missing dates by previus day
fill_misiing <- function(df){
missing_day <- numeric()
for (i in 1:(nrow(df)-1)){
if ((df$date[i+1] - df$date[i]) > 1){
missing_day <- c(missing_day,i)
}
}
missing_dates <- df$date[missing_day]
for (i in missing_dates){
new_date <- i+1
temp_row <- df[df$date == i,-1]
temp_row <- data.frame("date" = as.Date(new_date), temp_row)
pool1 <- df[df$date <= i,]
pool2 <- df[df$date > i,]
df <- rbind(pool1, temp_row, pool2)
}
df
}
# pool <- read.csv("/media/reza/Data/Reza/Muenster/data/train-processed-wo-lag.csv", stringsAsFactors = F)
pool <- read.csv("D:/Reza/Muenster/data/train-processed-wo-lag.csv", stringsAsFactors = F)
pool$date <- as.Date(pool$date)
pool <- fill_misiing(pool)
visitors <- ts(pool$visitors_pool_total, frequency = 365, start = c(2005,as.POSIXlt(pool$date[1])$yday))
visitors_3years <- window(visitors, start=2010)
plot(visitors_3years, col="blue", ylab  = "Number of visitors", xlab="Year", main="Visitors to the Nettebad OsnabrÃ¼ck (2010-2013)")
lag.plot(visitors, set.lags = c(1), col=rgb(0,0,1,.5), main = "Lag 1 plot")
lag.plot(visitors, set.lags = c(7), col=rgb(0,0,1,.5), main = "Lag 7 plot")
lag.plot(visitors, set.lags = c(30), col=rgb(0,0,1,.5), main = "Lag  30 plot")
lag.plot(visitors, set.lags = c(365), col=rgb(0,0,1,.5), main = "Lag 365 plot")
acf(visitors,main = "Autocorrelation function of last three years visitors", lag.max = 35, xaxt="n", ylab = "Autocorrelation")
axis(1,at=(0:35)/350,labels = 0:35, cex=0.8)
visitors <- ts(pool$visitors_pool_total, frequency = 7, start = c(1, as.POSIXlt(pool$date[1])$wday))
start_3y <-  length(visitors)/7 - 3*52
visitors_3years <- window(visitors, start=start_3y)
stl <- stl(visitors, s.window = "per")
stl2 <- stl(visitors_3years, s.window = "per")
autoplot(stl2) + geom_line(color="blue") + ggtitle("Seasonal decompostion of visitors")
rem <- stl$time.series[,2] + stl$time.series[,3]
we <- weekdays(tail(pool$date, length(visitors)), abbreviate = T)
we <- factor(we, levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))
d <- data.frame("weekday" = we, "Total.Visitors" = visitors, "Seasonality.Removed" = rem)
melted <- melt(d, id.vars = "weekday")
qplot(x=weekday, y=value, data=melted, facets = .~variable, color=weekday) + geom_boxplot() + guides(color=F) +
ggtitle("Visitors based on the week day")
#plot(we,visitors_3years)
#plot(we, rem)
autoplot(window(stl$time.series[,1], end=5)) + ggtitle("Weekly seasonality") + ylab("Number of Visitors")
av <- mean(stl$time.series[,2] + stl$time.series[,3])
autoplot(forecast(stl, h=120),  include = 150, plot.conf = F) + ggtitle("Forecast using STL") + ylab("Number of visitors") +
geom_abline(slope = 0, intercept = av, color="magenta")
stl <- stl(visitors_3years, s.window = "per")
rem <- stl$time.series[,2] + stl$time.series[,3]
we <- weekdays(tail(pool$date, length(visitors_3years)), abbreviate = T)
we <- factor(we, levels = c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"))
d <- data.frame("weekday" = we, "Visitors.Total" = visitors_3years, "Seasonality.Removed" = rem)
melted <- melt(d)
q1 <- qplot(x=weekday, y=value, data=melted, facets = .~variable, color=weekday) + geom_boxplot() + guides(color=F) +
ggtitle("Visitors based on the week day last three years")
q1
library(forecast)
library(timeDate)
library(caret)
library(reshape2)
library(slidify)
# fill missing dates by previus day
fill_misiing <- function(df){
missing_day <- numeric()
for (i in 1:(nrow(df)-1)){
if ((df$date[i+1] - df$date[i]) > 1){
missing_day <- c(missing_day,i)
}
}
missing_dates <- df$date[missing_day]
for (i in missing_dates){
new_date <- i+1
temp_row <- df[df$date == i,-1]
temp_row <- data.frame("date" = as.Date(new_date), temp_row)
pool1 <- df[df$date <= i,]
pool2 <- df[df$date > i,]
df <- rbind(pool1, temp_row, pool2)
}
df
}
# pool <- read.csv("/media/reza/Data/Reza/Muenster/data/train-processed-wo-lag.csv", stringsAsFactors = F)
pool <- read.csv("D:/Reza/Muenster/data/train-processed-wo-lag.csv", stringsAsFactors = F)
pool$date <- as.Date(pool$date)
pool <- fill_misiing(pool)
visitors <- ts(pool$visitors_pool_total, frequency = 365, start = c(2005,as.POSIXlt(pool$date[1])$yday))
visitors_3years <- window(visitors, start=2010)
plot(visitors_3years, col="blue", ylab  = "Number of visitors", xlab="Year", main="Visitors to the Nettebad OsnabrÃ¼ck (2010-2013)")
lag.plot(visitors, set.lags = c(1), col=rgb(0,0,1,.5), main = "Lag 1 plot")
lag.plot(visitors, set.lags = c(7), col=rgb(0,0,1,.5), main = "Lag 7 plot")
lag.plot(visitors, set.lags = c(30), col=rgb(0,0,1,.5), main = "Lag  30 plot")
lag.plot(visitors, set.lags = c(365), col=rgb(0,0,1,.5), main = "Lag 365 plot")
acf(visitors,main = "Autocorrelation function of last three years visitors", lag.max = 35, xaxt="n", ylab = "Autocorrelation")
axis(1,at=(0:35)/350,labels = 0:35, cex=0.8)
visitors <- ts(pool$visitors_pool_total, frequency = 7, start = c(1, as.POSIXlt(pool$date[1])$wday))
start_3y <-  length(visitors)/7 - 3*52
visitors_3years <- window(visitors, start=start_3y)
stl <- stl(visitors, s.window = "per")
stl2 <- stl(visitors_3years, s.window = "per")
autoplot(stl2) + geom_line(color="blue") + ggtitle("Seasonal decompostion of visitors")
rem <- stl$time.series[,2] + stl$time.series[,3]
we <- weekdays(tail(pool$date, length(visitors)), abbreviate = T)
we <- factor(we, levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))
d <- data.frame("weekday" = we, "Total.Visitors" = visitors, "Seasonality.Removed" = rem)
melted <- melt(d, id.vars = "weekday")
qplot(x=weekday, y=value, data=melted, facets = .~variable, color=weekday) + geom_boxplot() + guides(color=F) +
ggtitle("Visitors based on the week day")
#plot(we,visitors_3years)
#plot(we, rem)
autoplot(window(stl$time.series[,1], end=5)) + ggtitle("Weekly seasonality") + ylab("Number of Visitors")
av <- mean(stl$time.series[,2] + stl$time.series[,3])
autoplot(forecast(stl, h=120),  include = 150, plot.conf = F) + ggtitle("Forecast using STL") + ylab("Number of visitors") +
geom_abline(slope = 0, intercept = av, color="magenta")
stl <- stl(visitors_3years, s.window = "per")
rem <- stl$time.series[,2] + stl$time.series[,3]
we <- weekdays(tail(pool$date, length(visitors_3years)), abbreviate = T)
# we <- factor(we, levels = c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"))
we <- factor(we, levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))
d <- data.frame("weekday" = we, "Visitors.Total" = visitors_3years, "Seasonality.Removed" = rem)
melted <- melt(d)
q1 <- qplot(x=weekday, y=value, data=melted, facets = .~variable, color=weekday) + geom_boxplot() + guides(color=F) +
ggtitle("Visitors based on the week day last three years")
q1
q1
visitors2 <- msts(as.numeric(visitors_3years), seasonal.periods = c(7,365.25), start= 2010)
tbat <- tbats(visitors2,  num.cores=4)
comp = tbats.components(tbat)
plot(comp, main= "Multiseasonal decomposition of the last three years", col ="blue")
fore <- forecast(tbat, h = 365)
# plot(fore, plot.conf=F)
autoplot(forecast(tbat, h=365), include = 365, plot.conf =T) + ggtitle("Forecast the next year using TBATS with confidence intervals")
t <- read.csv("/media/reza/Data/Reza/Muenster/data/test/final-07.11.csv", stringsAsFactors = F)
t <- read.csv("D:/Reza/Muenster/data/test/final-07.11.csv", stringsAsFactors = F)
# t <- read.csv("/media/reza/Data/Reza/Muenster/data/test/final-07.11.csv", stringsAsFactors = F)
t <- read.csv("D:/Reza/Muenster/data/test/final-07.11.csv", stringsAsFactors = F)
t$date <- as.Date(t$date, "%m/%d/%Y" )
fore2 <- c(fore$mean[1:358], fore$mean[359:364])
t <- cbind(t,as.integer(fore2))
names(t) <- c("Date", "Machine.learning", "TBATS")
p <- ggplot(t, aes(Date, Machine.learning)) +
geom_line(color=rgb(1,0,0,.7)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
scale_x_date("Date", date_breaks = "10 days") +
ggtitle("Forecast by Machine learning approach") + ylab("Number of Visitors")
print(p)
p + geom_line(aes(y = TBATS, plot.conf =T), color=rgb(0,0,1,.5)) +
ggtitle("Forecast by Machine learning approach vs. TBATS approach")
slidify("index.Rmd")
plot(forecast(tbat, h=365), include = 0, plot.conf =T, color=rgb(0,0,1,.5), main = "Forecast by Machine learning approach vs. TBATS approach", xaxt="n", ylab="Number of Visitors")
step <- 1/365
Date <- c(t$Date[1:(364-7)], as.Date("2013-12-25"), tail(t$Date,7))
axis(1,at=seq(2013+2*step,2014+step, by = 10*step),labels = Date[seq(1,365,by=10)], hadj = 1, las=3, cex.axis=0.7)
ml <- c(t$Machine.learning[1:(364-7)], 0, tail(t$Machine.learning,7))
lines(seq(2013+2*step,2014+step, by = step), ml, col = rgb(1,0,0,.7))
slidify("index.Rmd")
library(forecast)
library(timeDate)
library(caret)
library(reshape2)
library(slidify)
# fill missing dates by previus day
fill_misiing <- function(df){
missing_day <- numeric()
for (i in 1:(nrow(df)-1)){
if ((df$date[i+1] - df$date[i]) > 1){
missing_day <- c(missing_day,i)
}
}
missing_dates <- df$date[missing_day]
for (i in missing_dates){
new_date <- i+1
temp_row <- df[df$date == i,-1]
temp_row <- data.frame("date" = as.Date(new_date), temp_row)
pool1 <- df[df$date <= i,]
pool2 <- df[df$date > i,]
df <- rbind(pool1, temp_row, pool2)
}
df
}
# pool <- read.csv("/media/reza/Data/Reza/Muenster/data/train-processed-wo-lag.csv", stringsAsFactors = F)
pool <- read.csv("D:/Reza/Muenster/data/train-processed-wo-lag.csv", stringsAsFactors = F)
pool$date <- as.Date(pool$date)
pool <- fill_misiing(pool)
visitors <- ts(pool$visitors_pool_total, frequency = 365, start = c(2005,as.POSIXlt(pool$date[1])$yday))
visitors_3years <- window(visitors, start=2010)
slidify("index.Rmd")
getwd()
setwd("D:/Reza/jobs/pmone/WhyIfailed")
slidify("index.Rmd")
library(knitr)
remove.packages("evaluate", lib="~/R/win-library/3.2")
remove.packages("evaluate")
install.packages("evaluate")
library(evaluate)
slidify("index.Rmd")
slidify("index.Rmd")
fill_misiing <- function(df){
missing_day <- numeric()
for (i in 1:(nrow(df)-1)){
if ((df$date[i+1] - df$date[i]) > 1){
missing_day <- c(missing_day,i)
}
}
missing_dates <- df$date[missing_day]
for (i in missing_dates){
new_date <- i+1
temp_row <- df[df$date == i,-1]
temp_row <- data.frame("date" = as.Date(new_date), temp_row)
pool1 <- df[df$date <= i,]
pool2 <- df[df$date > i,]
df <- rbind(pool1, temp_row, pool2)
}
df
}
# pool <- read.csv("/media/reza/Data/Reza/Muenster/data/train-processed-wo-lag.csv", stringsAsFactors = F)
pool <- read.csv("D:/Reza/Muenster/data/train-processed-wo-lag.csv", stringsAsFactors = F)
pool$date <- as.Date(pool$date)
pool <- fill_misiing(pool)
visitors <- ts(pool$visitors_pool_total, frequency = 365, start = c(2005,as.POSIXlt(pool$date[1])$yday))
visitors_3years <- window(visitors, start=2010)
